Layout System

old --- setLayoutPosition

        const rect = entity.getBoundingClientRect();
        const panel = entity.closest('mr-panel');
        const appRect = this.app.getBoundingClientRect();

        const innerWidth = mrjsUtils.xr.isPresenting ? window.innerWidth : global.appWidth;
        const innerHeight = mrjsUtils.xr.isPresenting ? window.innerHeight : global.appHeight;

        // Calculate the center of the viewport
        const centerX = innerWidth / 2;
        const centerY = innerHeight / 2;

        let windowWidth = mrjsUtils.xr.isPresenting ? panel.width : global.viewPortWidth;
        let windowHeight = mrjsUtils.xr.isPresenting ? panel.height : global.viewPortHeight;

        // Adjust the element's position to be relative to the center of the viewport
        const centeredX = rect.left - appRect.left - centerX;
        const centeredY = rect.top - centerY;

        let threeX = (centeredX / innerWidth) * windowWidth;
        let threeY = (centeredY / innerHeight) * windowHeight;

        threeX += entity.width / 2;
        threeY += entity.height / 2;

        this.tempPosition.setX(threeX);
        this.tempPosition.setY(-threeY);

        entity.object3D.position.setX(this.tempPosition.x);
        entity.object3D.position.setY(this.tempPosition.y);


new --- setLayoutPosition


        const rect = entity.getBoundingClientRect();

        const panel = entity.closest('mr-panel');
        const panelRect = panel.getBoundingClientRect();

        let innerWidth =  parseFloat(panel.compStyle.width.split('px')[0]);
        let innerHeight = parseFloat(panel.compStyle.height.split('px')[0]);
        let centerX = innerWidth / 2;
        let centerY = innerHeight / 2;

        let windowWidth = panel.width
        let windowHeight = panel.height
        let centeredX = rect.left - panelRect.left - centerX;
        let centeredY = rect.top - panelRect.top - centerY;

        let threeX = (centeredX / innerWidth) * windowWidth;
        let threeY = (centeredY / innerHeight) * windowHeight;

        threeX += entity.width / 2;
        threeY += entity.height / 2;

        entity.object3D.position.setX(threeX);
        entity.object3D.position.setY(-threeY);

        if (entity.compStyle.zIndex != 'auto') {
            // default zIndex values in css are in the 1000s - using this arbitrary divide to convert to an actual usable threejs value.
            entity.object3D.position.setZ(parseFloat(entity.compStyle.zIndex / 1000));

            if(entity.compStyle.zIndex == entity.parentElement.compStyle.zIndex){
                entity.object3D.position.z += 0.0001
            }
        } else {
            entity.object3D.position.z = 0
        }

PanelSystem

new --- panelUpdate

        const rect = entity.getBoundingClientRect();
        const appRect = this.app.getBoundingClientRect();
        let innerWidth =  global.appWidth;
        let innerHeight = global.appHeight;
        let centerX = innerWidth / 2;
        let centerY = innerHeight / 2;

        let windowWidth = global.viewPortWidth * mrjsUtils.app.scale
        let windowHeight = global.viewPortHeight * mrjsUtils.app.scale
        let centeredX = rect.left - appRect.left - centerX;
        let centeredY = rect.top - appRect.top - centerY;

        let threeX = (centeredX / innerWidth) * windowWidth;
        let threeY = (centeredY / innerHeight) * windowHeight;

        threeX += entity.width / 2;
        threeY += entity.height / 2;

        entity.panel.position.setX(threeX);
        entity.panel.position.setY(-threeY);

        if (entity.compStyle.zIndex != 'auto') {
            // default zIndex values in css are in the 1000s - using this arbitrary divide to convert to an actual usable threejs value.
            entity.panel.position.setZ(parseFloat(entity.compStyle.zIndex / 1000));

            if(entity.compStyle.zIndex == entity.parentElement.compStyle.zIndex){
                entity.panel.position.z += 0.0001
            }
        } else {
            entity.panel.position.z = 0
        }
